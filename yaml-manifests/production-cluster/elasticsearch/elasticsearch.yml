apiVersion: elasticsearch.k8s.elastic.co/v1
kind: Elasticsearch
metadata:
  name: elasticsearch-prod
  namespace: elastic-prod
  annotations:
    eck.k8s.elastic.co/downward-node-labels: "topology.kubernetes.io/zone"
spec:
  version: 8.15.1
  secureSettings:
  - secretName: s3-secret-settings

  http:
    tls:
      selfSignedCertificate:
        subjectAltNames:
        - dns: demo.es.34.172.125.225.ip.es.io

  monitoring:
    metrics:
      elasticsearchRefs:
      - name: elasticsearch-mon
        namespace: elastic-mon
    logs:
      elasticsearchRefs:
      - name: elasticsearch-mon
        namespace: elastic-mon

  nodeSets:
  - name: master
    count: 1
    config:
      node.roles: ["master"]
      node.attr.zone: ${ZONE}
      cluster.routing.allocation.awareness.attributes: k8s_node_name, zone
    podTemplate:
      spec:
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ["sh", "-c", "sysctl -w vm.max_map_count=262144"]
        containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
          env:
          - name: ZONE
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['topology.kubernetes.io/zone']

          resources:
            limits:
              memory: 2Gi
              cpu: 100m
            requests:
              memory: 2Gi
              cpu: 100m

        affinity:
          podAntiAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  elasticsearch.k8s.elastic.co/statefulset-name: elasticsearch-prod-es-master
              topologyKey: topology.kubernetes.io/hostname

    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
        storageClassName: premium-rwo # or defautl_storageclass

  - name: data-hot
    count: 1
    config:
      node.roles: ["data_content", "data_hot", "ingest", "remote_cluster_client", "transform", "ml"]
      node.attr.zone: ${ZONE}
      cluster.routing.allocation.awareness.attributes: k8s_node_name,zone
    podTemplate:
      spec:
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
        containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
          env:
          - name: ZONE
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['topology.kubernetes.io/zone']
          resources:
            limits:
              memory: 2Gi
              cpu: 100m
            requests:
              memory: 2Gi
              cpu: 100m
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    elasticsearch.k8s.elastic.co/statefulset-name: elasticsearch-prod-es-data-hot
                topologyKey: topology.kubernetes.io/zone

    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
        storageClassName: premium-rwo

  - name: ml
    count: 0
    config:
      node.roles: ["ml", "remote_cluster_client"]
      node.attr.zone: ${ZONE}
      cluster.routing.allocation.awareness.attributes: k8s_node_name,zone
    podTemplate:
      spec:
        initContainers:
        - name: sysctl
          securityContext:
            privileged: true
            runAsUser: 0
          command: ['sh', '-c', 'sysctl -w vm.max_map_count=262144']
        containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:8.15.1
          env:
          - name: ZONE
            valueFrom:
              fieldRef:
                fieldPath: metadata.annotations['topology.kubernetes.io/zone']
          resources:
            limits:
              memory: 2Gi
              cpu: 100m
            requests:
              memory: 2Gi
              cpu: 100m
        affinity:
          podAntiAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    elasticsearch.k8s.elastic.co/statefulset-name: elasticsearch-prod-es-ml
                topologyKey: topology.kubernetes.io/zone

    volumeClaimTemplates:
    - metadata:
        name: elasticsearch-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
        storageClassName: premium-rwo
