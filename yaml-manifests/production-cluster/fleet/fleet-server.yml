apiVersion: agent.k8s.elastic.co/v1alpha1
kind: Agent
metadata:
  name: fleet-server-prod
  namespace: elastic-prod
spec:
  version: 8.15.1
  http:
    tls:
      selfSignedCertificate:
        subjectAltNames:
        - dns: demo.fl.34.272.125.225.ip.es.io

  kibanaRef:
    name: kibana-prod
    namespace: elastic-prod
  elasticsearchRefs:
  - name: elasticsearch-prod
    namespace: elastic-prod

  mode: fleet
  fleetServerEnabled: true
  policyID: eck-fleet-server
  deployment:
    replicas: 2
    podTemplate:
      spec:
        serviceAccountName: fleet-server-prod
        automountServiceAccountToken: true
        securityContext:
          runAsUser: 0
          seccompProfile:
            type: "RuntimeDefault"

        containers:
        - name: agent
          image: docker.elastic.co/beats/elastic-agent:8.15.1
          securityContext:
            privileged: false
            capabilities:
              drop:
              - ALL
          resources:
            limits:
              memory: 500m
              cpu: 100m
            requests:
              memory: 500m
              cpu: 100m
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: fleet-server-prod
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - pods
  - nodes
  - namespaces
  verbs:
  - get
  - watch
  - list
- apiGroups: ["coordination.k8s.io"]
  resources:
  - leases
  verbs:
  - get
  - create
  - update
- apiGroups: ["apps"]
  resources:
  - replicasets
  verbs:
  - list
  - watch
- apiGroups: ["batch"]
  resources:
  - jobs
  verbs:
  - list
  - watch
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fleet-server-prod
  namespace: elastic-prod
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: fleet-server-prod
subjects:
- kind: ServiceAccount
  name: fleet-server-prod
  namespace: elastic-prod
roleRef:
  kind: ClusterRole
  name: fleet-server-prod
  apiGroup: rbac.authorization.k8s.io
